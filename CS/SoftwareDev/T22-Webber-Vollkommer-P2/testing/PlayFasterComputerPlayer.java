import java.io.File;
import java.io.FileNotFoundException;
import java.util.ArrayList;
import java.util.Scanner;
//Basic idea: ALWAYS add to the list of guessedletters. After a first initial guess run, use this.nextGuess and the truth value of it.
//Remove words containing letters if the guess was incorrect, remove words that do not contain the letter if the guess was correct. 

public class PlayFasterComputerPlayer extends SmartAIComputerPlayer{

	//Stored possible words of wordLength. Created and added to in the constructor. 
	//Should be modified every time the method is run, removing words that contain
	//incorrect letters OR removing words that do not contain correct letters in the correct positions. 
	public ArrayList possibleWords = new ArrayList(0); 

	//The entire dictionary file. Only used to get words of a certain length 
	//in constructor once, irrelevent after.
	public ArrayList dictionary = new ArrayList(0); 

	//Boolean controlling certain parts of the method:
	//Certain parts only need to run once, other parts only need to run after a 
	//first guess has been made. 
	public boolean madeFirstGuess = false;

	//Stores the last char guess made by the method so that the method
	//can tell which letter it got correct/incorrect and remove 
	//corresponding words the next time it runs. 
	public char lastGuess = 0;

	//char array to store guessed letters already generated by the method.
	//The best char guess generated each time its run is added to this list
	//at the next available position. 
	//The method cross-checks with this list to ensure that the current letter
	//it is going to guess is not already in this array. 
	//If it is found in this array, the char with the next-highest frequency 
	//is made to be the next guess.
	public char[] guessedLetters = new char[26];
	//Marks the position for guessedLetters char array, incremented by 1 for each run. 
	public int position = 0;

	//
	public String InString = "";
	//Important 2D array: Stores alphabet and each letter's frequency, which is
	//incremented by 1 every time it occurs in every word of possibleWords. 
	//Frequency is reset each time method is run.
	//modified possibleWords means new letter frequencies. 
	//CANNOT use 2D char array: chars are not able to store frequency values
	//above 9 (single char). 
	//2D String array requires using a lot of conversions (charAt & parseInt)
	//2D int array may be more efficient. 
	public String[][] possibleLetters = {
			//First row: Alphabet
			{"a", "b", "c", "d", "e", "f", "g", "h", "i", "j", 
				"k", "l", "m", "n", "o", "p", "q", "r", "s", "t", 
				"u", "v", "w", "x", "y", "z"},
				//Second row: Frequency of corresponding letter
				{"0", "0", "0", "0", "0", "0", "0", "0", "0", 
					"0", "0", "0", "0", "0", "0", "0", "0", "0", 
					"0", "0", "0", "0", "0", "0", "0", "0"},
	};

	//--------------------------------------------------------------------------------------------
	//CONSTRUCTOR:
	//Takes input for the wordLength when building PlayFasterComputerPlayer
	//Builds dictionary file in a dictionary ArrayList
	//Adds all words of the the same length as wordLength to possibleWords ArrayList
	//
	public PlayFasterComputerPlayer(int wordLength){
		Scanner scanner = null;
		try{
			File file = new File("dictionary.data");
			scanner = new Scanner(file);
		}catch(FileNotFoundException filenotfound){
			System.out.println("Where's the dictionary.data file, yo?");
			System.exit(1);
		}
		//Adds all dictionary.data entries to ArrayList
		while(scanner.hasNext()){
			this.dictionary.add(scanner.next());
		}

		//Adds all words the same length as wordLength to possibleWords arrayList
		for(int i = 0; i < this.dictionary.size(); i++){
			String CurrentWord = (String) this.dictionary.get(i);
			if(CurrentWord.length() == wordLength){
				this.possibleWords.add(CurrentWord);
			}
		}

		for(int i = 0; i < wordLength; i++){
			InString += "-";
		}

	}



	//----------------------------------------------------------------------------
	//METHOD educatedGuess:
	//Narrows down possibleWords based on what letters are correct/incorrect.
	public char generateMove(String updatedInString, String already_guessed){
		System.out.println(updatedInString);
		//removing words from PossibleWords
		//updatedInString != old InString: Guess was correct, remove words without those letters in those positions
		ArrayList updatedPossibleWords = new ArrayList(0); 
		updatedPossibleWords.clear();
		if((!(updatedInString.equalsIgnoreCase(InString)))){
			char[] updatedInStringArray = updatedInString.toCharArray();
			for(int i = 0; i < this.possibleWords.size(); i++){
				boolean keepWord = false;
				String CurrentWord = (String) this.possibleWords.get(i);
				char[] currentWordArray = CurrentWord.toCharArray();
				//check currentWord
				for(int j = 0; j < currentWordArray.length; j++){
					if(updatedInStringArray[j] != '-'){
						//if the char at position in currentword doesnt match same char position in updatedInString, remove word.
						if(updatedInStringArray[j] == currentWordArray[j]){
							keepWord = true;
							//need to roll back i!!!!!
						}else{
							keepWord = false;
							j = currentWordArray.length;
						}
					}
				}
				if(keepWord = true){
					updatedPossibleWords.add(this.possibleWords.get(i));
				}
			}
			//new InString = old InString: Guess was incorrect, remove word with that guess.
		}else if((updatedInString.equalsIgnoreCase(InString))){
			for(int i = 0; i < this.possibleWords.size(); i++){
				String CurrentWord = (String) this.possibleWords.get(i);
				int foundLetter = CurrentWord.indexOf(this.lastGuess);
				if(foundLetter < 0){
					updatedPossibleWords.add(this.possibleWords.get(i));
				}
			}
		}
		this.possibleWords = updatedPossibleWords;
		InString = updatedInString; //updating InString, sets up for the next guess.
		char nextGuess = 0; //the returned char guess being initialized.

		//Resetting letter frequency each time method is run. 
		//Narrowing down possibleWords means new frequencies for letters. 
		for(int i = 0; i < 26; i++){
			this.possibleLetters[1][i] = "0";
		}

		//Adds all letter frequencies from words in possibleWords.
		//int i runs for ALL POSSIBLE WORDS OF WORDLENGTH.
		System.out.print("Starting possibleWords: ");
		System.out.println(this.possibleWords.size());
		for(int i = 0; i < this.possibleWords.size(); i++){
			String CurrentWord = (String) this.possibleWords.get(i);
			char[] currentWordArray = CurrentWord.toCharArray();
			//int j runs for LENGTH OF CURRENT WORD BEING SCANNED.
			for(int j = 0; j < currentWordArray.length; j++){
				//int x runs for EVERY LETTER OF THE ALPHABET 
				for(int x = 0; x < 26; x++){
					//if the current letter 'j' in the current word = the current 'x' letter, 'x' has corresponding frequency increased by 1.
					if(currentWordArray[j] == this.possibleLetters[0][x].charAt(0)){
						int currentInt = Integer.parseInt(this.possibleLetters[1][x]);
						currentInt++;
						String currentIntString = Integer.toString(currentInt);
						this.possibleLetters[1][x] = currentIntString;
					}	
				}
			}
		}



		//Sorting possibleLetters array by frequency, starting with highest.
		int loop = 0;
		while(loop < 2){
			for(int i = 0, j = 1; i < 26 && j < 26; i++, j++){
				for(int x = 0; x < this.guessedLetters.length; x++){
					if(this.possibleLetters[0][i].charAt(0) == this.guessedLetters[x]){
						this.possibleLetters[1][i] = "0";
					}
				}
				int frequency1 = Integer.parseInt(this.possibleLetters[1][i]);
				int frequency2 = Integer.parseInt(this.possibleLetters[1][j]);
				if(frequency1 < frequency2){
					String temp = this.possibleLetters[1][j];
					this.possibleLetters[1][j] = this.possibleLetters[1][i];
					this.possibleLetters[1][i] = temp;
					String temp2 = this.possibleLetters[0][j];
					this.possibleLetters[0][j] = this.possibleLetters[0][i];
					this.possibleLetters[0][i] = temp2;

					i = 0;
					j = 1;
				}
				
			}
			loop++;
		}
		//printPossibleLetters();
		

		//Setting nextGuess and its frequency. Adding the letter to guessedletters.
		//If nextGuess is found in guessedLetters, the next highest letter is used. 
		nextGuess = this.possibleLetters[0][0].charAt(0);
		int tempposition = 1;
		for(int i = 0; i < this.guessedLetters.length; i++){
			if(nextGuess == this.guessedLetters[i]){
				nextGuess = this.possibleLetters[0][tempposition].charAt(0);
				i = 0;
				tempposition++;
			}
		}
		int highestFrequency = Integer.parseInt(this.possibleLetters[1][tempposition - 1]);
		this.guessedLetters[position] = nextGuess;
		this.position++;

		this.madeFirstGuess = true;
		System.out.println();
		System.out.print("Highest Letter: " + nextGuess);
		System.out.println("	Frequency: " + highestFrequency);
		this.lastGuess = nextGuess;
		return nextGuess;

	}

	//----------------------------------------------------------------------------
	//Prints the possible letters array and corresponding frequency. 
	public void printPossibleLetters(){
		System.out.println();
		System.out.println("Possible letters: ");

		for(int row = 0; row < this.possibleLetters.length; row++){
			System.out.print("{");
			for(int col = 0; col < this.possibleLetters[0].length; col++){
				System.out.print(this.possibleLetters[row][col] + ", ");
			}
			System.out.print("}");
			System.out.println();
		}
	}



}
